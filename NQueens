public class NQueens {
    static int[] x; // Array to hold the queen positions

    // Method to check if a queen can be placed at position (k, i)
    public static boolean Place(int k, int i) {
        for (int j = 1; j <= k - 1; j++) {
            if (x[j] == i || Math.abs(x[j] - i) == Math.abs(j - k)) {
                return false; // Another queen is in the same column or diagonal
            }
        }
        return true; // Safe to place queen here
    }

    // Method to solve the N-Queens problem
    public static void NQueens(int k, int n) {
        for (int i = 1; i <= n; i++) {
            if (Place(k, i)) {
                x[k] = i; // Place queen in kth row at column i
                if (k == n) {
                    // Print solution if all queens are placed
                    for (int j = 1; j <= n; j++) {
                        System.out.print(x[j] + " ");
                    }
                    System.out.println();
                } else {
                    // Recur to place next queen
                    NQueens(k + 1, n);
                }
            }
        }
    }

    public static void main(String[] args) {
        int n = 8; // Size of the chessboard (for example, 8x8)
        x = new int[n + 1]; // Initialize the array to store queen positions
        NQueens(1, n); // Start placing queens from row 1
    }
}

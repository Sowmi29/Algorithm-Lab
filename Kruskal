import java.util.Arrays;
import java.util.Scanner;

class Kruskal {
   
    static class Edge implements Comparable<Edge> {
        int src, dest, weight;

      
        public int compareTo(Edge compareEdge) {
            return this.weight - compareEdge.weight;
        }
    }

    int vertices, edges;
    Edge edgeList[];

    Kruskal(int vertices, int edges) {
        this.vertices = vertices;
        this.edges = edges;
        edgeList = new Edge[edges];
        for (int i = 0; i < edges; i++) {
            edgeList[i] = new Edge();
        }
    }

 
    int find(int parent[], int i) {
        if (parent[i] == -1) {
            return i;
        }
        return find(parent, parent[i]);
    }

    void union(int parent[], int x, int y) {
        int xset = find(parent, x);
        int yset = find(parent, y);
        parent[xset] = yset;
    }

    
    void kruskalMST() {
        Edge result[] = new Edge[vertices]; 
        int parent[] = new int[vertices]; 

        for (int i = 0; i < vertices; i++) {
            parent[i] = -1;
        }

        Arrays.sort(edgeList);

        int mincost = 0;
        int edgeCount = 0;

        for (Edge nextEdge : edgeList) {
            if (edgeCount == vertices - 1) break; 

            int x = find(parent, nextEdge.src);
            int y = find(parent, nextEdge.dest);

            if (x != y) {
                result[edgeCount++] = nextEdge;
                mincost += nextEdge.weight;
                union(parent, x, y); 
            }
        }

        if (edgeCount != vertices - 1) {
            System.out.println("No spanning tree");
            return;
        }


        System.out.println("Edges in the MST:");
        for (int i = 0; i < edgeCount; i++) {
            System.out.println(result[i].src + " -- " + result[i].dest + " == " + result[i].weight);
        }
        System.out.println("Minimum cost: " + mincost);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of vertices: ");
        int V = scanner.nextInt();

        System.out.print("Enter the number of edges: ");
        int E = scanner.nextInt();

        Kruskal graph = new Kruskal(V, E);

        for (int i = 0; i < E; i++) {
            System.out.println("Enter edge " + (i + 1) + " (source, destination, weight): ");
            graph.edgeList[i].src = scanner.nextInt();
            graph.edgeList[i].dest = scanner.nextInt();
            graph.edgeList[i].weight = scanner.nextInt();
        }

       
        graph.kruskalMST();
    }
}

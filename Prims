import java.util.*;

public class Prims{
    static final int INF = Integer.MAX_VALUE; 

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of vertices: ");
        int vertices = scanner.nextInt();

        int[][] graph = new int[vertices][vertices];

        System.out.println("Enter the adjacency matrix (use -1 for no direct edge):");
        for (int i = 0; i < vertices; i++) {
            for (int j = 0; j < vertices; j++) {
                graph[i][j] = scanner.nextInt();
                if (graph[i][j] == -1) {
                    graph[i][j] = INF;
                }
            }
        }

        primMST(graph, vertices);
    }

    static void primMST(int[][] graph, int vertices) {
        boolean[] inMST = new boolean[vertices];
        int[] minEdge = new int[vertices]; 
        int[] parent = new int[vertices];

        Arrays.fill(minEdge, INF);
        Arrays.fill(parent, -1);
        minEdge[0] = 0;

        for (int count = 0; count < vertices - 1; count++) {
            int u = selectMinVertex(minEdge, inMST, vertices);

            inMST[u] = true; 
            for (int v = 0; v < vertices; v++) {
                if (graph[u][v] != INF && !inMST[v] && graph[u][v] < minEdge[v]) {
                    minEdge[v] = graph[u][v];
                    parent[v] = u;
                }
            }
        }


        printMST(parent, graph);
    }

    static int selectMinVertex(int[] minEdge, boolean[] inMST, int vertices) {
        int minValue = INF;
        int minVertex = -1;

        for (int v = 0; v < vertices; v++) {
            if (!inMST[v] && minEdge[v] < minValue) {
                minValue = minEdge[v];
                minVertex = v;
            }
        }
        return minVertex;
    }

    static void printMST(int[] parent, int[][] graph) {
        int totalCost = 0;
        System.out.println("The Minimum Cost Spanning Tree edges are:");

        for (int i = 1; i < parent.length; i++) {
            if (parent[i] != -1) {
                System.out.println("(" + parent[i] + ", " + i + ") with weight " + graph[parent[i]][i]);
                totalCost += graph[parent[i]][i];
            }
        }

        System.out.println("The minimum cost of the spanning tree is: " + totalCost);
    }
}
